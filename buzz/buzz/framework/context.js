import { RenderObject } from "../render/renderer.js";
import { AppTheme } from "../style/theme.js";

/**
 * Writes no information on the error to the console.
 */
const DEBUG_NONE = 0;

/**
 * The default debug mode which writes any errors generated by the app to the console.
 */
const DEBUG_ERROR = 1;

/**
 * With slightly more information, this debug error mode writes even warnings generated to the console.
 */
const DEBUG_WARNING = 2;

/**
 * The most verbose debug level possible. It writes out everything that is passed to the console from the framework.
 * This should typically only be used in testing or development environments. You are advised to never use this in a
 * production environment because it slows down the rendering time of the WebApp drastically.
 */
const DEBUG_LOG = 3;

class AppContext {
	/**
	 * The render associated with this context.
	 * 
	 * @type {RenderObject}
	 */
	renderer;

	/**
	 * The theme used for this app globally. It contains information on how each widget group is themed in the app ranging from
	 * buttons, text fields, editable text fields, images, dialogs, and so on.
	 * 
	 * @type {AppTheme}
	 */
	theme;

	/**
	 * 
	 * @type {number}
	 */
	 debugLevel;

	/**
	 * 
	 * @param {RenderObject} renderer 
	 * @param {AppTheme} theme
	 */
	constructor(renderer, theme = null) {
		this.renderer = renderer;
		this.theme = theme;
		this.debugLevel = 0;

		if(globalThis.buzzContext !== null && globalThis.buzzContext !== undefined) {
			throw("Attempted to create another context inside an app. An app can only have one context running at at time.");
		}

		// Initialize the Widget directory used to keep track of all created Widgets.
		globalThis.buzzWidgetDirectory = {};

		// Initialize the list of empty navigation controllers
		globalThis.buzzNavigationControllers = {};

		// Finally, bind this instance of context as the one fo the entire app..
		globalThis.buzzContext = this;
	}

	static initialize(renderer, theme = null) {
		const context = new AppContext(renderer, theme);
		return context;
	}
}

export {
	AppContext,
	DEBUG_ERROR,
	DEBUG_WARNING,
	DEBUG_LOG,
	DEBUG_NONE
}